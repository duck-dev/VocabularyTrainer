<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:learningModes="clr-namespace:VocabularyTrainer.Views.LearningModes"
             xmlns:views="clr-namespace:VocabularyTrainer.Views"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="VocabularyTrainer.Views.LearningModes.MultipleChoiceView">

    <UserControl.Styles>
        <Style Selector="Button.multiple-choice-button">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="CornerRadius" Value="10"/>
            <Setter Property="Margin" Value="10,10"/>
            <Setter Property="Transitions">
                <Transitions>
                    <TransformOperationsTransition Property="RenderTransform" Duration="0:0:0.2"/> <!-- selectable-button-effect -->
                    <BrushTransition Property="Background" Delay="0:0:0.05" Duration="0:0:0.5"/>
                </Transitions>
            </Setter>
        </Style>
        <Style Selector="Viewbox.multiple-choice-viewbox">
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="MaxHeight" Value="58"/>
            <Setter Property="StretchDirection" Value="UpOnly"/>
        </Style>
        <Style Selector="TextBlock.multiple-choice-text">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="MaxHeight" Value="58"/>
            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Foreground" Value="{StaticResource OppositeAccent}"/>
        </Style>
    </UserControl.Styles>

    <Grid ColumnDefinitions="1*,3*">
        <learningModes:LearningModeSidebarView Grid.Column="0" DataContext="{Binding}">
            <learningModes:LearningModeSidebarView.AdditionalContent>
                <StackPanel Orientation="Vertical">
                    <views:LessonOptionItem Description="Toggle progressive learning" IsInlined="True">
                        <views:LessonOptionItem.TooltipText>
                            When progressive learning is enabled, the focus is placed on asking words that you don't know well, followed by words that haven't been asked yet with a slightly lower frequency. 
Words you have answered correctly will occur less often.
                        </views:LessonOptionItem.TooltipText>
                        <views:LessonOptionItem.MainContent>
                            <CheckBox DataContext="{Binding $parent[UserControl].DataContext}"
                                      IsChecked="{Binding ProgressiveLearningEnabled}"/>
                        </views:LessonOptionItem.MainContent>
                    </views:LessonOptionItem>
                    <views:LessonOptionItem Description="Ask Term" IsInlined="True" Margin="0,10,0,0">
                        <views:LessonOptionItem.TooltipText>
                            Should the program display the term and you have to answer with the definition? Both can be ticked.
                        </views:LessonOptionItem.TooltipText>
                        <views:LessonOptionItem.MainContent>
                            <CheckBox DataContext="{Binding $parent[UserControl].DataContext}"
                                      IsChecked="{Binding AskTerm}"/>
                        </views:LessonOptionItem.MainContent>
                    </views:LessonOptionItem>
                    <views:LessonOptionItem Description="Ask Definition" IsInlined="True" Margin="0,0,0,25">
                        <views:LessonOptionItem.TooltipText>
                            Should the program display the definition and you have to answer with the term? Both can be ticked.
                        </views:LessonOptionItem.TooltipText>
                        <views:LessonOptionItem.MainContent>
                            <CheckBox DataContext="{Binding $parent[UserControl].DataContext}"
                                      IsChecked="{Binding AskDefinition}"/>
                        </views:LessonOptionItem.MainContent>
                    </views:LessonOptionItem>
                </StackPanel>
            </learningModes:LearningModeSidebarView.AdditionalContent>
        </learningModes:LearningModeSidebarView>
        <Grid Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="30,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding GridColumnsButton[0]}"/>
                <ColumnDefinition Width="{Binding GridColumnsButton[1]}"/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0" RowDefinitions="*,*" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid Grid.Row="0" RowDefinitions="*,*" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,20">
                    <TextBlock Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Bottom" FontSize="24"
                               Foreground="{StaticResource MainGrey}" Margin="0,0,0,50"
                               IsVisible="{Binding !ProgressiveLearningEnabled}"
                               IsEnabled="{Binding !ProgressiveLearningEnabled}">
                        <TextBlock.Text>
                            <MultiBinding StringFormat="\{0\}/\{1\}">
                                <Binding Path="WordIndexCorrected"/>
                                <Binding Path="MaximumItems"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    <Grid Grid.Row="1" ColumnDefinitions="*,Auto" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Viewbox Grid.Column="0" Height="84" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,60,0">
                            <TextBlock Foreground="{StaticResource OppositeAccent}" Text="{Binding DisplayedTerm}"/>
                        </Viewbox>
                        <ToggleButton Grid.Column="1" x:Name="Star" Classes="star-toggle" VerticalAlignment="Center"
                                      Checked="OnStarChecked" Unchecked="OnStarUnchecked"
                                      IsChecked="{Binding IsCurrentWordDifficult}"
                                      Template="{StaticResource ToggleStarShapeTemplate}" Width="64" Height="64"/>
                    </Grid>
                </Grid>
                <Grid Grid.Row="1" RowDefinitions="*,Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                      Margin="30,0,30,30">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{Binding GridColumnsChoices[0]}"/>
                        <ColumnDefinition Width="{Binding GridColumnsChoices[1]}"/>
                        <ColumnDefinition Width="{Binding GridColumnsChoices[2]}"/>
                    </Grid.ColumnDefinitions>
                    <Grid Grid.Column="1" Grid.Row="0" ColumnDefinitions="*,*" RowDefinitions="*,*" HorizontalAlignment="Stretch"
                          VerticalAlignment="Stretch" MinWidth="500">
                        <Button Grid.Row="0" Grid.Column="0" Classes="selectable-button-effect highlight-no-change multiple-choice-button"
                                Command="{Binding CheckAnswer}" CommandParameter="0" Background="{Binding ButtonGradients[0]}">
                            <Viewbox Classes="multiple-choice-viewbox">
                                <TextBlock Classes="multiple-choice-text" Text="{Binding Choices[0]}"/>
                            </Viewbox>
                        </Button>
                        <Button Grid.Row="0" Grid.Column="1" Classes="selectable-button-effect highlight-no-change multiple-choice-button"
                                Command="{Binding CheckAnswer}" CommandParameter="1" Background="{Binding ButtonGradients[1]}">
                            <Viewbox Classes="multiple-choice-viewbox">
                                <TextBlock Classes="multiple-choice-text" Text="{Binding Choices[1]}"/>
                            </Viewbox>
                        </Button>
                        <Button Grid.Row="1" Grid.Column="0" Classes="selectable-button-effect highlight-no-change multiple-choice-button"
                                Command="{Binding CheckAnswer}" CommandParameter="2" Background="{Binding ButtonGradients[2]}">
                            <Viewbox Classes="multiple-choice-viewbox">
                                <TextBlock Classes="multiple-choice-text" Text="{Binding Choices[2]}"/>
                            </Viewbox>
                        </Button>
                        <Button Grid.Row="1" Grid.Column="1" Classes="selectable-button-effect highlight-no-change multiple-choice-button"
                                Command="{Binding CheckAnswer}" CommandParameter="3" Background="{Binding ButtonGradients[3]}">
                            <Viewbox Classes="multiple-choice-viewbox">
                                <TextBlock Classes="multiple-choice-text" Text="{Binding Choices[3]}"/>
                            </Viewbox>
                        </Button>
                    </Grid>
                    <Button Grid.Column="1" Grid.Row="1" Classes="selectable-button-effect" HorizontalAlignment="Center"
                            Command="{Binding ShowSolution}" Margin="0,20,0,0">
                        <Button.Template>
                            <ControlTemplate>
                                <TextBlock FontSize="22" Foreground="{StaticResource MainRed}" Text="Show solution"/>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                </Grid>
            </Grid>
            <Grid Grid.Column="1" RowDefinitions="*,*" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                  IsVisible="{Binding IsSolutionShown}" IsEnabled="{Binding IsSolutionShown}"
                  Margin="0,0,10,42"> <!-- Compensate the height (including margin) of the "Show solution" button
                                                     to make this button appear centered vertically
                                                     
                                                     as well as the right-margin of the main parent Grid of all elements in this view
                                                     subtracted from the margin of the parent Grid of the choices (40)
                                                     => space to left (greater) - space to right (smaller) => 40 - 30 = 10 -->
                <Button Grid.Row="1" Classes="highlight-no-change selectable-button-effect" Margin="0,0"
                        HorizontalAlignment="Stretch" VerticalAlignment="Center" Height="70"
                        Background="{StaticResource AppBlue}" Foreground="{StaticResource SameAccent}"
                        Command="{Binding NextWord}" CommandParameter="True" HotKey="Enter" CornerRadius="10">
                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="Next word"
                               Foreground="{StaticResource SameAccent}" FontSize="20"/>
                </Button>
            </Grid>
        </Grid>
    </Grid>
</UserControl>